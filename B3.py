# -*- coding: utf-8 -*-
"""DAA_Assignment3_Code.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UTADhF4puo9uSZ4Jmp9kHT3Rrc3oU8n9
"""

# Write a program to solve a 0-1 Knapsack problem using dynamic programming or branch and bound strategy.


def knapsack_dynamic_programming(W, weights, price, n):
    K = [[0 for x in range(W + 1)] for x in range(n + 1)]
    items = []
    # Build table K[][] in bottom up manner
    for i in range(n + 1):
        for w in range(W + 1):
            if i == 0 or w == 0:
                K[i][w] = 0
            elif weights[i-1] <= w:  # inside capacity
                K[i][w] = max(price[i-1]
                              + K[i-1][w-weights[i-1]],
                              K[i-1][w])
                items.append(i)
            else:
                K[i][w] = K[i-1][w]
    w = W
    res = K[n][W]  # backward
    print()
    print("Items : ")
    for i in range(n, 0, -1):
        if res <= 0:
            break
        if res == K[i - 1][w]:
            continue
        else:

            # This item is included.
            print(weights[i - 1], " - ", price[i-1])

            # Since this weight is included
            # its value is deducted
            res = res - price[i - 1]
            w = w - weights[i - 1]
    return K[n][W]


# Fit in the weight given, maximizing the profit


ch = "1"
while(ch != "0"):
    print("1. Knapsack problem ")
    ch = input("0. Exit")
    if(ch == "0"):
        break
    elif ch == "1":
        price = []
        weights = []
        n = int(input("Enter number of items: "))
        for i in range(0, n):
            x = int(input("Enter price: "))
            y = int(input("Enter weight: "))
            price.append(x)
            weights.append(y)
        W = int(input("Enter the weight of the knapsack: "))
        print("The optimum price is : ",
              knapsack_dynamic_programming(W, weights, price, n))
    else:
        print("Invalid input")
#price = [60, 100, 120]
#weights = [10, 20, 30]
#W = 50
